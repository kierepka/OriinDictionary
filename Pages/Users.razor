@page "/Users"
@attribute [Authorize(Roles = Const.RolesUsersEditors)]
@using OriinDic.Helpers
@inherits DicBasePage

<PageHeader IsLoading="@(UsersState?.Value.IsLoading ?? true)" CurrentAlertText="@CurrentAlert" LoadingText="@MyText?.Loading" HeaderText="@MyText?.Users" />

<DataGrid TItem="User"
          Data="@UsersState?.Value?.RootObject.Results"
          ReadData="@OnReadData"
          TotalItems="@UsersState?.Value?.RootObject.Results.Count"
          ShowPager="false"
          UseInternalEditing="false"
          Editable="true"
          EditMode="DataGridEditMode.Form"
          Sortable="true"
          Filterable="true"
          Striped="true"
          Bordered="true"
          Hoverable="true"
          RowSelectable=@(_=>false)          
          RowInserted="@OnRowInserted"
          RowUpdated="@OnRowUpdated"
          RowRemoved="@OnRowRemoved">
    <DataGridColumns>
        <DataGridCommandColumn TItem="User" Width="170px">
            <NewCommandTemplate>
                <Button Color="Color.Success" Clicked="@context.Clicked">@MyText?.NewTxt</Button>
            </NewCommandTemplate>
            <EditCommandTemplate>
                <Button Color="Color.Primary" Clicked="@(async() => await OnEdit(context))">@MyText?.Edit</Button>
            </EditCommandTemplate>
            <SaveCommandTemplate>
                <Button Color="Color.Primary" Clicked="@context.Clicked">@MyText?.Save</Button>
            </SaveCommandTemplate>
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="@context.Clicked">@MyText?.Delete</Button>
            </DeleteCommandTemplate>
            <CancelCommandTemplate>
                <Button Color="Color.Secondary" Clicked="@context.Clicked">@MyText?.Cancel</Button>
            </CancelCommandTemplate>
            <ClearFilterCommandTemplate>
                <Button Color="Color.Warning" Clicked="@context.Clicked">@MyText?.ClearFilter</Button>
            </ClearFilterCommandTemplate>
        </DataGridCommandColumn>
        <DataGridColumn TItem="User" Field="@nameof(User.Id)" Caption="@MyText?.UsersId" Sortable="true" Editable="false" />
        <DataGridColumn TItem="User" Field="@nameof(User.UserName)" Caption="@MyText?.UsersUserName" Sortable="true" Editable="true" />
        <DataGridColumn TItem="User" Field="@nameof(User.FirstName)" Caption="@MyText?.UsersFirstName" Sortable="true" Editable="true" />
        <DataGridColumn TItem="User" Field="@nameof(User.LastName)" Caption="@MyText?.UsersLastName" Sortable="true" Editable="true" />
        <DataGridColumn TItem="User" Field="@nameof(User.Email)" Caption="@MyText?.UsersEmail" Editable="true" />
        <DataGridCheckColumn TItem="User" Field="@nameof(User.IsSuperuser)" Caption="@MyText?.UsersIsSuperUser" Editable="true" Filterable="false">
            <DisplayTemplate>
                <Check TValue="bool" Checked="context.IsSuperuser" Disabled="true" ReadOnly="true" />
            </DisplayTemplate>
            <EditTemplate>
                <Check TValue="bool" Checked="@((bool)( context.CellValue ))"
                       CheckedChanged="@(( v ) => context.CellValue = v)" />
            </EditTemplate>
        </DataGridCheckColumn>
        <DataGridCheckColumn TItem="User" Field="@nameof(User.Assistant)" Caption="@MyText?.UsersIsAssistant" Editable="true" Filterable="false">
            <DisplayTemplate>
                <Check TValue="bool" Checked="context.Assistant" Disabled="true" ReadOnly="true" />
            </DisplayTemplate>
            <EditTemplate>
                <Check TValue="bool" Checked="@((bool)( context.CellValue ))"
                       CheckedChanged="@(( v ) => context.CellValue = v)" />
            </EditTemplate>
        </DataGridCheckColumn>
        <DataGridColumn TItem="User" Field="@nameof( User.TranslatingLanguages )" Caption="@MyText?.UsersTranslatingLanguages" Editable="true">
            <FilterTemplate>

                <Select TValue="int" SelectedValueChanged="@(e => context.TriggerFilterChange(e.ToString().Contains(" *") ? "" : e.ToString()))">
                    <SelectItem Value="@("*")">@(MyText?.NotSet ?? string.Empty)</SelectItem>
                    @if (LanguagesState is not null)
                    {
                        @foreach (var item in LanguagesState.Value.Languages)
                        {
                            <SelectItem Value="@item.Id">@item.Name</SelectItem>
                        }
                    }
                </Select>

            </FilterTemplate>

            <DisplayTemplate>

                @{
                    var user = context;
                    <label class="checkbox">@(MyText?.UsersTranslatingLanguages ?? string.Empty)</label>
                    if (user.IsSuperuser)
                    {
                        <div class="control">@MyText?.SuperUserHasAll</div>
                    }
                    else
                    {
                        if (user.TranslatingLanguages.Count > 0)
                        {
                            foreach (var langT in user.TranslatingLanguages)
                            {
                                <div class="control">@GetLanguageName(langT);</div>
                            }
                        }
                        else
                        {
                            <div class="control">@MyText?.NotSet</div>
                        }
                    }
                }

            </DisplayTemplate>
            <EditTemplate>
                @{
                    var translatingLanguages = (List<int>)context.CellValue;
                    if ((translatingLanguages is null))
                    {
                        @MyText?.NotSet
                    }
                    else
                    {
                        @if (LanguagesState is not null)
                        {
                            var selectableTransLanguages = new List<SelectableLanguage>();
                            foreach (var lang in LanguagesState.Value.Languages)
                            {
                                selectableTransLanguages.Add(
                                    new SelectableLanguage(lang,
                                        translatingLanguages.Contains((int)lang.Id)));
                            }
                            <ListGroup Flush="true">
                                @foreach (var selLang in selectableTransLanguages)
                                {
                                    <ItemLanguage Language="@selLang" StatusChanged="@OnTransLangStatusChanged" />
                                }
                            </ListGroup>
                        }
                    }
                }
            </EditTemplate>
        </DataGridColumn>
        <DataGridColumn TItem="User" Field="@nameof( User.CoordinatingLanguages )" Caption="@MyText?.UsersCoordinatingLanguages" Editable="true">
            <FilterTemplate>

                <Select TValue="int" SelectedValueChanged="@(e => context.TriggerFilterChange(e.ToString().Contains(" *") ? "" : e.ToString()))">
                    <SelectItem Value="@(" *")">@MyText?.NotSet</SelectItem>
                    @if (LanguagesState is not null)
                    {
                        @foreach (var item in LanguagesState.Value.Languages)
                        {
                            <SelectItem Value="@item.Id">@item.Name</SelectItem>
                        }
                    }

                </Select>

            </FilterTemplate>

            <DisplayTemplate>
                @{
                    var user = context;
                    <label class="checkbox">@MyText?.UsersCoordinatingLanguages</label>
                    if (user.IsSuperuser)
                    {
                        <div class="control">@MyText?.SuperUserHasAll</div>
                    }
                    else
                    {
                        if (user.CoordinatingLanguages.Count > 0)
                        {
                            foreach (var langC in user.CoordinatingLanguages)
                            {
                                <div class="control">@GetLanguageName(langC);</div>
                            }
                        }
                        else
                        {
                            <div class="control">@MyText?.NotSet</div>
                        }
                    }
                }
            </DisplayTemplate>
            <EditTemplate>
                @{
                    var coordinatingLanguages = (List<int>)context.CellValue;
                    if (coordinatingLanguages is null)
                    {
                        @(MyText?.NotSet ?? string.Empty)
                    }
                    else
                    {
                        @if (LanguagesState is not null)
                        {
                            var selectableCoordLanguages = new List<SelectableLanguage>();
                            foreach (var lang in LanguagesState.Value.Languages)
                            {
                                selectableCoordLanguages.Add(
                                    new SelectableLanguage(lang,
                                        coordinatingLanguages.Contains((int)lang.Id)));
                            }
                            <ListGroup Flush="true">
                                @foreach (var selLang in selectableCoordLanguages)
                                {
                                    <ItemLanguage Language="@selLang" StatusChanged="@OnCoordLangStatusChanged" />
                                }
                            </ListGroup>
                        }
                    }
                }
            </EditTemplate>
        </DataGridColumn>
    </DataGridColumns>

</DataGrid>
